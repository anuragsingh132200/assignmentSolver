"""
Code Generation Tool
Generates project structures, sample code, and documentation.
"""

import os
import logging
from typing import Dict, List, Any
from pathlib import Path

logger = logging.getLogger(__name__)


class CodeGenerator:
    """Tool for generating code, project structures, and documentation."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def create_project_structure(self, language: str, framework: str, output_dir: str) -> Dict[str, Any]:
        """Create a basic project structure for the given language and framework."""
        try:
            self.logger.info(f"Creating {language} project structure with {framework}")
            
            files_created = []
            logs = []
            
            # Create output directory
            Path(output_dir).mkdir(parents=True, exist_ok=True)
            
            if language == "python":
                files_created.extend(self._create_python_structure(output_dir, framework))
            elif language == "javascript":
                files_created.extend(self._create_javascript_structure(output_dir, framework))
            elif language == "java":
                files_created.extend(self._create_java_structure(output_dir, framework))
            else:
                files_created.extend(self._create_generic_structure(output_dir, language))
            
            logs.append(f"Created {len(files_created)} files for {language} project")
            
            return {
                "files_created": files_created,
                "logs": logs,
                "language": language,
                "framework": framework
            }
            
        except Exception as e:
            self.logger.error(f"Error creating project structure: {e}")
            return {
                "files_created": [],
                "logs": [f"Error: {str(e)}"],
                "error": str(e)
            }
    
    def _create_python_structure(self, output_dir: str, framework: str) -> List[str]:
        """Create Python project structure."""
        files_created = []
        
        # Create main Python file
        main_py = os.path.join(output_dir, "main.py")
        with open(main_py, "w") as f:
            f.write('''"""
Main application entry point.
"""

def main():
    """Main function."""
    print("Hello, Assignment Assistant Agent!")

if __name__ == "__main__":
    main()
''')
        files_created.append(main_py)
        
        # Create requirements.txt
        requirements_txt = os.path.join(output_dir, "requirements.txt")
        with open(requirements_txt, "w") as f:
            if framework == "django":
                f.write("Django>=4.0.0\n")
            elif framework == "flask":
                f.write("Flask>=2.0.0\n")
            elif framework == "fastapi":
                f.write("fastapi>=0.100.0\nuvicorn>=0.20.0\n")
            else:
                f.write("# Add your dependencies here\n")
        files_created.append(requirements_txt)
        
        # Create README.md
        readme_md = os.path.join(output_dir, "README.md")
        with open(readme_md, "w") as f:
            f.write(f'''# Python Project

This is a Python project generated by the Assignment Assistant Agent.

## Setup

1. Create a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\\Scripts\\activate
   ```

2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Run the application:
   ```bash
   python main.py
   ```

## Framework: {framework}

## Project Structure

- `main.py` - Main application entry point
- `requirements.txt` - Python dependencies
- `README.md` - Project documentation
''')
        files_created.append(readme_md)
        
        return files_created
    
    def _create_javascript_structure(self, output_dir: str, framework: str) -> List[str]:
        """Create JavaScript project structure."""
        files_created = []
        
        # Create package.json
        package_json = os.path.join(output_dir, "package.json")
        with open(package_json, "w") as f:
            package_data = {
                "name": "assignment-project",
                "version": "1.0.0",
                "description": "Project generated by Assignment Assistant Agent",
                "main": "index.js",
                "scripts": {
                    "start": "node index.js",
                    "test": "jest"
                },
                "dependencies": {},
                "devDependencies": {
                    "jest": "^29.0.0"
                }
            }
            
            if framework == "react":
                package_data["dependencies"]["react"] = "^18.0.0"
                package_data["dependencies"]["react-dom"] = "^18.0.0"
                package_data["scripts"]["start"] = "react-scripts start"
                package_data["devDependencies"]["react-scripts"] = "^5.0.0"
            elif framework == "vue":
                package_data["dependencies"]["vue"] = "^3.0.0"
                package_data["devDependencies"]["@vitejs/plugin-vue"] = "^4.0.0"
            elif framework == "angular":
                package_data["dependencies"]["@angular/core"] = "^15.0.0"
                package_data["dependencies"]["@angular/common"] = "^15.0.0"
            
            import json
            f.write(json.dumps(package_data, indent=2))
        files_created.append(package_json)
        
        # Create main JavaScript file
        main_js = os.path.join(output_dir, "index.js")
        with open(main_js, "w") as f:
            f.write('''/**
 * Main application entry point.
 */

console.log("Hello, Assignment Assistant Agent!");

// Add your application logic here
''')
        files_created.append(main_js)
        
        # Create README.md
        readme_md = os.path.join(output_dir, "README.md")
        with open(readme_md, "w") as f:
            f.write(f'''# JavaScript Project

This is a JavaScript project generated by the Assignment Assistant Agent.

## Setup

1. Install dependencies:
   ```bash
   npm install
   ```

2. Run the application:
   ```bash
   npm start
   ```

3. Run tests:
   ```bash
   npm test
   ```

## Framework: {framework}

## Project Structure

- `index.js` - Main application entry point
- `package.json` - Node.js dependencies and scripts
- `README.md` - Project documentation
''')
        files_created.append(readme_md)
        
        return files_created
    
    def _create_java_structure(self, output_dir: str, framework: str) -> List[str]:
        """Create Java project structure."""
        files_created = []
        
        # Create src directory structure
        src_dir = os.path.join(output_dir, "src", "main", "java")
        Path(src_dir).mkdir(parents=True, exist_ok=True)
        
        # Create main Java class
        main_java = os.path.join(src_dir, "Main.java")
        with open(main_java, "w") as f:
            f.write('''/**
 * Main application entry point.
 */
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, Assignment Assistant Agent!");
    }
}
''')
        files_created.append(main_java)
        
        # Create pom.xml for Maven
        pom_xml = os.path.join(output_dir, "pom.xml")
        with open(pom_xml, "w") as f:
            f.write(f'''<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.assignment</groupId>
    <artifactId>assignment-project</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>
    
    <dependencies>
        <!-- Add your dependencies here -->
    </dependencies>
</project>
''')
        files_created.append(pom_xml)
        
        # Create README.md
        readme_md = os.path.join(output_dir, "README.md")
        with open(readme_md, "w") as f:
            f.write(f'''# Java Project

This is a Java project generated by the Assignment Assistant Agent.

## Setup

1. Install Maven (if not already installed)

2. Compile the project:
   ```bash
   mvn compile
   ```

3. Run the application:
   ```bash
   mvn exec:java -Dexec.mainClass="Main"
   ```

## Framework: {framework}

## Project Structure

- `src/main/java/Main.java` - Main application entry point
- `pom.xml` - Maven project configuration
- `README.md` - Project documentation
''')
        files_created.append(readme_md)
        
        return files_created
    
    def _create_generic_structure(self, output_dir: str, language: str) -> List[str]:
        """Create generic project structure."""
        files_created = []
        
        # Create main file
        main_file = os.path.join(output_dir, f"main.{language}")
        with open(main_file, "w") as f:
            f.write(f'''/*
 * Main application entry point for {language} project.
 */

// Add your application logic here
''')
        files_created.append(main_file)
        
        # Create README.md
        readme_md = os.path.join(output_dir, "README.md")
        with open(readme_md, "w") as f:
            f.write(f'''# {language.title()} Project

This is a {language} project generated by the Assignment Assistant Agent.

## Setup

1. Install required dependencies for {language}
2. Compile/run the project as appropriate for {language}

## Project Structure

- `main.{language}` - Main application entry point
- `README.md` - Project documentation
''')
        files_created.append(readme_md)
        
        return files_created
    
    def create_requirements_doc(self, output_dir: str) -> str:
        """Create a requirements analysis document."""
        requirements_doc = os.path.join(output_dir, "REQUIREMENTS.md")
        
        with open(requirements_doc, "w") as f:
            f.write('''# Requirements Analysis

## Project Overview
This document outlines the requirements for the assignment project.

## Functional Requirements
- [ ] Core functionality implementation
- [ ] User interface (if applicable)
- [ ] Data processing (if applicable)
- [ ] API endpoints (if applicable)

## Non-Functional Requirements
- [ ] Performance requirements
- [ ] Security requirements
- [ ] Scalability requirements
- [ ] Maintainability requirements

## Technical Requirements
- [ ] Programming language specifications
- [ ] Framework requirements
- [ ] Database requirements (if applicable)
- [ ] External service integrations (if applicable)

## Deliverables
- [ ] Source code
- [ ] Documentation
- [ ] Tests
- [ ] Deployment instructions

## Success Criteria
- [ ] All functional requirements met
- [ ] Code quality standards met
- [ ] Tests pass
- [ ] Documentation complete
''')
        
        return requirements_doc
    
    def create_sample_implementation(self, language: str, output_dir: str) -> Dict[str, Any]:
        """Create sample implementation code."""
        files_created = []
        
        if language == "python":
            # Create a sample module
            sample_py = os.path.join(output_dir, "sample_module.py")
            with open(sample_py, "w") as f:
                f.write('''"""
Sample module demonstrating basic functionality.
"""

class SampleClass:
    """A sample class for demonstration."""
    
    def __init__(self, name: str):
        """Initialize the sample class."""
        self.name = name
    
    def greet(self) -> str:
        """Return a greeting message."""
        return f"Hello, {self.name}!"
    
    def calculate(self, a: int, b: int) -> int:
        """Perform a simple calculation."""
        return a + b


def sample_function(text: str) -> str:
    """A sample function."""
    return f"Processed: {text}"


if __name__ == "__main__":
    # Example usage
    sample = SampleClass("Assignment Assistant")
    print(sample.greet())
    print(f"Calculation result: {sample.calculate(5, 3)}")
    print(sample_function("Hello World"))
''')
            files_created.append(sample_py)
        
        elif language == "javascript":
            # Create a sample module
            sample_js = os.path.join(output_dir, "sample_module.js")
            with open(sample_js, "w") as f:
                f.write('''/**
 * Sample module demonstrating basic functionality.
 */

class SampleClass {
    constructor(name) {
        this.name = name;
    }
    
    greet() {
        return `Hello, ${this.name}!`;
    }
    
    calculate(a, b) {
        return a + b;
    }
}

function sampleFunction(text) {
    return `Processed: ${text}`;
}

// Example usage
if (require.main === module) {
    const sample = new SampleClass("Assignment Assistant");
    console.log(sample.greet());
    console.log(`Calculation result: ${sample.calculate(5, 3)}`);
    console.log(sampleFunction("Hello World"));
}

module.exports = { SampleClass, sampleFunction };
''')
            files_created.append(sample_js)
        
        return {
            "files_created": files_created,
            "language": language
        }
    
    def create_documentation(self, output_dir: str, include_api_docs: bool = True) -> Dict[str, Any]:
        """Create project documentation."""
        files_created = []
        
        # Create API documentation if requested
        if include_api_docs:
            api_doc = os.path.join(output_dir, "API.md")
            with open(api_doc, "w") as f:
                f.write('''# API Documentation

## Overview
This document describes the API endpoints and functionality.

## Endpoints

### GET /health
Returns the health status of the application.

**Response:**
```json
{
    "status": "healthy",
    "timestamp": "2024-01-01T00:00:00Z"
}
```

### POST /process
Processes input data.

**Request Body:**
```json
{
    "data": "input data"
}
```

**Response:**
```json
{
    "result": "processed data",
    "status": "success"
}
```

## Error Handling
All endpoints return appropriate HTTP status codes and error messages.

## Authentication
[Describe authentication requirements if applicable]
''')
            files_created.append(api_doc)
        
        # Create setup documentation
        setup_doc = os.path.join(output_dir, "SETUP.md")
        with open(setup_doc, "w") as f:
            f.write('''# Setup Instructions

## Prerequisites
- [List required software and versions]

## Installation Steps

1. Clone the repository
2. Install dependencies
3. Configure environment variables
4. Run the application

## Configuration

### Environment Variables
- `DATABASE_URL` - Database connection string
- `API_KEY` - API key for external services
- `DEBUG` - Enable debug mode

## Running the Application

### Development Mode
```bash
# Start development server
npm run dev
# or
python app.py
```

### Production Mode
```bash
# Build and start production server
npm run build && npm start
# or
gunicorn app:app
```

## Testing

### Run Tests
```bash
npm test
# or
pytest
```

### Test Coverage
```bash
npm run test:coverage
# or
pytest --cov
```
''')
        files_created.append(setup_doc)
        
        return {
            "files_created": files_created,
            "include_api_docs": include_api_docs
        }
